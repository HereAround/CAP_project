############################################################################
##
##                                ActionsForCAP package
##
##  Copyright 2016, Sebastian Gutsche, University of Siegen
##                  Sebastian Posur,   University of Siegen
##
#! @Chapter Internal Exterior Algebra Modules
##
#############################################################################

####################################
##
## Constructors
##
####################################

##
InstallMethod( InternalExteriorAlgebraModuleCategory,
               [ IsCapCategoryObject ],
               
  function( object )
    local name;
    
    name := Concatenation( "Module category of the internal exterior algebra generated by ", String( object ) );
    
    return LeftActionsCategory( object, name, IsInTheContextOfInternalExteriorAlgebraModuleCategory );
    
end );

##
InstallMethod( InternalExteriorAlgebraModuleCategoryObject,
               [ IsCapCategoryMorphism, IsCapCategoryObject ],
               
  function( structure_morphism, object )
    local result_object;
    
    return InternalExteriorAlgebraModuleCategoryObject( structure_morphism, InternalExteriorAlgebraModuleCategory( object ) );
    
end );

##
InstallMethod( InternalExteriorAlgebraModuleCategoryObject,
               [ IsCapCategoryMorphism, IsCapCategory ],
               
  function( structure_morphism, category )
    
    return LeftActionObject( structure_morphism, category );
    
end );

##
InstallMethod( InternalExteriorAlgebraModuleCategoryMorphism,
               [ IsInternalExteriorAlgebraModuleCategoryObject,
                 IsCapCategoryMorphism,
                 IsInternalExteriorAlgebraModuleCategoryObject ],
                    
    function( source, morphism, range )
      local result_morphism;
      
      return LeftActionMorphism( source, morphism, range );
      
end );

####################################
##
## Operations
##
####################################

##
InstallMethod( ExteriorAlgebraAsModule,
               [ IsCapCategory and IsInTheContextOfInternalExteriorAlgebraModuleCategory ],
               
  function( category )
    local exterior_algebra_multiplication_list;
    
    exterior_algebra_multiplication_list := ExteriorAlgebraAsModuleMultiplicationList( category );
    
    return InternalExteriorAlgebraModuleCategoryObject(
             DirectSumFunctorial( exterior_algebra_multiplication_list ), category );
    
end );

##
InstallMethod( ExteriorAlgebraAsModuleMultiplicationList,
               [ IsCapCategory and IsInTheContextOfInternalExteriorAlgebraModuleCategory ],
               
  function( category )
    local v, u, top, exterior_algebra_multiplication_list, id_v, n, morphism_1, n_minus_2_power, morphism_2;
    
    v := UnderlyingActingObject( category );
    
    u := TensorUnit( UnderlyingCategory( category ) );
    
    top := Dimension( v );
    
    exterior_algebra_multiplication_list := [ UniversalMorphismFromZeroObject( u ) ];
    
    if top = 0 then
        
        return InternalExteriorAlgebraModuleCategoryObject( exterior_algebra_multiplication_list[1], category );
        
    fi;
    
    Add( exterior_algebra_multiplication_list, RightUnitor( v ) );
    
    id_v := IdentityMorphism( v );
    
    for n in [ 3 .. top + 1 ] do
        
        morphism_1 := TensorProductOnMorphisms( id_v, exterior_algebra_multiplication_list[n - 1] );
        
        n_minus_2_power := Range( exterior_algebra_multiplication_list[n - 2] );
        
        morphism_2 := PreCompose( [
                        AssociatorRightToLeft( v, v, n_minus_2_power ),
                        TensorProductOnMorphisms( Braiding( v, v ), IdentityMorphism( n_minus_2_power ) ),
                        AssociatorLeftToRight( v, v, n_minus_2_power ),
                        morphism_1 ] );
        
        Add( exterior_algebra_multiplication_list, CokernelProjection( morphism_1 + morphism_2 ) );
        
    od;
    
    Add( exterior_algebra_multiplication_list,
         UniversalMorphismIntoZeroObject( TensorProductOnObjects( v, Range( exterior_algebra_multiplication_list[top + 1] ) ) ) );
    
    return exterior_algebra_multiplication_list;
    
end );

##
InstallMethod( FreeInternalExteriorAlgebraModule,
               [ IsCapCategoryObject, IsCapCategory and IsInTheContextOfInternalExteriorAlgebraModuleCategory ],
               
  function( w, category )
    local exterior_algebra, v, structure_morphism;
    
    exterior_algebra := ExteriorAlgebraAsModule( category );
    
    v := UnderlyingActingObject( category );
    
    structure_morphism := PreCompose( [
      AssociatorRightToLeft( v, ActionDomain( exterior_algebra ), w ),
      TensorProductOnMorphisms( StructureMorphism( exterior_algebra ), IdentityMorphism( w ) ) ] 
    );
    
    return InternalExteriorAlgebraModuleCategoryObject( structure_morphism, category );
    
end );

##
InstallMethod( InternalExteriorAlgebraModuleHigherMultiplications,
               [ IsInternalExteriorAlgebraModuleCategoryObject ],
               
  function( object )
    local m, top, multiplication_list, category, v, id_m, id_v, structure_morphism, n, 
          epimorphism, n_minus_1_power, test_morphism, exterior_algebra_multiplication_list;
    
    m := ActionDomain( object );
    
    category := CapCategory( object );
    
    v := UnderlyingActingObject( category );
    
    top := Dimension( v );
    
    multiplication_list := [ LeftUnitor( m ) ];
    
    if top = 0 then
        
        return multiplication_list;
        
    fi;
    
    id_m := IdentityMorphism( m );
    
    id_v := IdentityMorphism( v );
    
    structure_morphism := StructureMorphism( object );
    
    exterior_algebra_multiplication_list := ExteriorAlgebraAsModuleMultiplicationList( category );
    
    for n in [ 1 .. top ] do
        
        epimorphism := TensorProductOnMorphisms( exterior_algebra_multiplication_list[n + 1], id_m );
        
        n_minus_1_power := Range( exterior_algebra_multiplication_list[n] );
        
        test_morphism := PreCompose( [
          AssociatorLeftToRight( v, n_minus_1_power, m ),
          TensorProductOnMorphisms( id_v, multiplication_list[n] ),
          structure_morphism ] );
        
        Add( multiplication_list, ColiftAlongEpimorphism( epimorphism, test_morphism ) );
        
    od;
    
    return multiplication_list;
    
end );
